module paddleB (
    input clk,
    input rst,
    input playing,
    input btnLeft,
    input btnRight,
    output padB[4]
  ) {
  
  .clk(clk) {
    edge_detector edge_detector_left(#RISE(1), #FALL(0)); // detect rising edges
    edge_detector edge_detector_right(#RISE(1), #FALL(0));
    button_conditioner button_cond_left;
    button_conditioner button_cond_right;
    .rst(rst){
      fsm state(.clk(clk), #INIT(GAMESTART)) = {GAMEON,GAMESTART,LEFTBTNWAIT,RIGHTBTNWAIT};
      dff padBtemp[4];
      }
  }
  
  always {
    padB = padBtemp.q;
    button_cond_left.in = btnLeft;
    edge_detector_left.in = button_cond_left.out;
    button_cond_right.in = btnRight;
    edge_detector_right.in = button_cond_right.out;
    
      case (state.q){
    
      state.GAMESTART:
        padBtemp.d = 14;
        state.d = state.GAMEON;
        
      state.GAMEON:
        if (playing == 1){
          if (edge_detector_left.out == 1 && padBtemp.q > 1){
            padBtemp.d = padBtemp.q - 1;
            padB = padBtemp.q;
            state.d = state.LEFTBTNWAIT;
          }
          if (edge_detector_right.out == 1 && padBtemp.q < 14){
           padBtemp.d = padBtemp.q + 1;
           padB = padBtemp.q;
           state.d = state.RIGHTBTNWAIT;
          }
        }
        else if (playing == 0){
          state.d = state.GAMESTART;
        }
        
      state.LEFTBTNWAIT:
        if (playing == 1){
          if (edge_detector_left.out == 0){
            state.d = state.GAMEON;
          }
        }
        
      state.RIGHTBTNWAIT:
        if (playing == 1){
          if (edge_detector_right.out == 0){
            state.d = state.GAMEON;
          }
        }
        
    }
  }
}