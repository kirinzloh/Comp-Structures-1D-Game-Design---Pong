module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    
    input abtnLeft,         // Player A btn input for paddle to go left
    input abtnRight,        // Player A btn input for paddle to go right
    input bbtnLeft,         // Player B btn input for paddle to go left
    input bbtnRight,        // Player B btn input for paddle to go right
    input btnStart,         // btn input to start/reset the game
    output ledmatrix[8],    // 16x16 led matrix display
    output score_seg[7],    // 4 digit 7-segment LEDs score display
    output score_sel[4]     // Digit select for score display
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
    }
  }
  sig pattern[16][16];      // led matrix pattern
  sig ballX[4];             // ball x-coordinate position 
  sig ballY[4];             // ball y-coordinate position
  sig padA[16];             // paddle A 16-bit display on LED
  sig padB[16];             // paddle B 16-bit display on LED
  sig padApos[4];           // paddle A x-coordinate position
  sig padBpos[4];           // paddle B x-coordinate position
  sig playing[2];           // determines state of the game
  sig scoreA[8];            // score of player A
  sig scoreB[8];            // score of player B
  sig scoreAdisplay[7];     // player A score display
  sig scoreBdisplay[7];     // player B score display 
  
  //creating modules
  display disp;            // display module for the LED matrix
  drawing drawpong;        // provides the required pattern inputs for display 
  logic logic;             // determines state of the game
  ball ball;               // module for the ball logic
  paddleA paddleA;         // module for paddle A logic
  paddleB paddleB;         // module for paddle B logic
  score score;             // module for game scores
  seven_seg segA;          // module for score display of player A score
  seven_seg segB;          // module for score display of player B score
  score_display score_display;   // module for score display through 4 digit 7-segment display
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port   
    
    playing = 0;            // game not started
    scoreA = 0;             // score initialized to 0
    scoreB = 0;             
    
    //instantiating the modules
    logic.clk = clk;
    logic.rst = rst;
    logic.btnStart = btnStart;
    logic.scoreA = scoreA;
    logic.scoreB = scoreB;
    playing = logic.playing;
    
    paddleA.clk = clk;
    paddleA.rst = rst;
    paddleA.playing = playing;
    paddleA.btnLeft = abtnLeft;
    paddleA.btnRight = abtnRight;
    padA = paddleA.padA;
    padApos = paddleA.padApos;
    
    paddleB.clk = clk;
    paddleB.rst = rst;
    paddleB.playing = playing;
    paddleB.btnLeft = bbtnLeft;
    paddleB.btnRight = bbtnRight;
    padB = paddleB.padB;
    padBpos = paddleB.padBpos;
    
    ball.clk = clk;
    ball.rst = rst;
    ball.playing = playing;
    ball.padA = padApos;
    ball.padB = padBpos;
    ballX = ball.ballX;
    ballY = ball.ballY;  
    
    score.clk = clk;
    score.rst = rst;
    score.playing = playing;
    score.ballY = ballY;
    scoreA = score.scoreA;
    scoreB = score.scoreB;     
    
    segA.char = scoreA;
    scoreAdisplay = segA.segs;
    segB.char = scoreB;
    scoreBdisplay = segB.segs;
    
    score_display.clk = clk;
    score_display.rst = rst;
    score_display.scoreAdisplay = scoreAdisplay;
    score_display.scoreBdisplay = scoreBdisplay;
    score_sel = score_display.score_sel;
    score_seg = score_display.score_display;
    
    drawpong.ballX = ballX;
    drawpong.ballY = ballY;
    drawpong.padA = padA;
    drawpong.padB = padB;
    drawpong.playing = playing;
    pattern = drawpong.pattern;
    
    disp.clk = clk;
    disp.rst = rst;
    disp.pattern = pattern;
    ledmatrix = disp.ledmatrix;
    
}}