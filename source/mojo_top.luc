module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    
    input abtnLeft,          // Player A btn input for paddle to go left
    input abtnRight,         // Player A btn input for paddle to go right
    input bbtnLeft,         // Player B btn input for paddle to go left
    input bbtnRight,        // Player B btn input for paddle to go right
    input btnStart,         // btn input to start the game
    output ledmatrix[8],    // led matrix display
    output score_seg[7],    // 7-segment LEDs score display
    output score_sel[4]     // Digit select for score display
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
    }
  }
  sig pattern[16][16];      // led matrix pattern
  sig ballX[4];
  sig ballY[4];
  sig padA[4];
  sig padB[4];
  sig playing;
  sig scoreA[4];
  sig scoreB[4];
  sig scoreAdisplay[7];
  sig scoreBdisplay[7];
  
  display disp;
  drawing drawpong;
  logic logic;
  ball ball;
  paddleA paddleA;
  paddleB paddleB;
  score score;
  seven_seg segA;
  seven_seg segB;
  score_display score_display;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    //seg.values = {4b1101,4b1101,4b1101,4b1101};
    //score_seg = ~seg.seg;
    //score_sel = ~seg.sel;
    
    //score_seg = 8b11111111;
    //score_sel = 4b0000;
    
//pattern = {c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},      //orientation is laterally inverted
//        c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
//        c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
//        c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
//        c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
//        c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
//        c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
//        c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
//        c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
//        c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
//        c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
//        c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
//        c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
//        c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
//        c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
//        c{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
    
    playing = 0;
    scoreA = 0;
    scoreB = 0; 
    
    logic.btnStart = btnStart;
    logic.scoreA = scoreA;
    logic.scoreB = scoreB;
    playing = logic.playing;
    
    paddleA.clk = clk;
    paddleA.rst = rst;
    paddleA.playing = playing;
//    paddleA.ballX = ballX;
    paddleA.btnLeft = abtnLeft;
    paddleA.btnRight = abtnRight;
    padA = paddleA.padA;
    
    paddleB.clk = clk;
    paddleB.rst = rst;
    paddleB.playing = playing;
    paddleB.btnLeft = bbtnLeft;
    paddleB.btnRight = bbtnRight;
    padB = paddleB.padB;
    
    ball.clk = clk;
    ball.rst = rst;
    ball.playing = playing;
    ball.padA = padA;
    ball.padB = padB;
    ballX = ball.ballX;
    ballY = ball.ballY;  
    
    score.clk = clk;
    score.rst = rst;
    score.playing = playing;
    score.ballY = ballY;
    scoreA = score.scoreA;
    scoreB = score.scoreB;     
    
    segA.char = scoreA;
    scoreAdisplay = segA.segs;
    segB.char = scoreB;
    scoreBdisplay = segB.segs;
    
    score_display.clk = clk;
    score_display.rst = rst;
    score_display.scoreAdisplay = scoreAdisplay;
    score_display.scoreBdisplay = scoreBdisplay;
    score_sel = score_display.score_sel;
    score_seg = score_display.score_display;
   
    drawpong.ballX = ballX;
    drawpong.ballY = ballY;
    drawpong.padA = padA;
    drawpong.padB = padB;
    drawpong.playing = playing;
    pattern = drawpong.pattern;
    
    disp.clk = clk;
    disp.rst = rst;
    disp.pattern = pattern;
    ledmatrix = disp.ledmatrix;
  }
}