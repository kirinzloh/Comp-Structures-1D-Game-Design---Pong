/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_18 (
    input [5:0] alufn,
    input [7:0] a,
    input [7:0] b,
    output reg sub_overflow,
    output reg z,
    output reg v,
    output reg n,
    output reg [7:0] alu_output
  );
  
  
  
  wire [8-1:0] M_adder_sum_output;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  wire [1-1:0] M_adder_sub_overflow;
  reg [6-1:0] M_adder_alufn;
  reg [8-1:0] M_adder_a;
  reg [8-1:0] M_adder_b;
  adder_28 adder (
    .alufn(M_adder_alufn),
    .a(M_adder_a),
    .b(M_adder_b),
    .sum_output(M_adder_sum_output),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n),
    .sub_overflow(M_adder_sub_overflow)
  );
  
  wire [8-1:0] M_compare_cmp_output;
  reg [6-1:0] M_compare_alufn;
  reg [1-1:0] M_compare_z;
  reg [1-1:0] M_compare_sub_overflow;
  reg [1-1:0] M_compare_n;
  compare_29 compare (
    .alufn(M_compare_alufn),
    .z(M_compare_z),
    .sub_overflow(M_compare_sub_overflow),
    .n(M_compare_n),
    .cmp_output(M_compare_cmp_output)
  );
  
  wire [8-1:0] M_boolean_boole_output;
  reg [6-1:0] M_boolean_alufn;
  reg [8-1:0] M_boolean_a;
  reg [8-1:0] M_boolean_b;
  boolean_30 boolean (
    .alufn(M_boolean_alufn),
    .a(M_boolean_a),
    .b(M_boolean_b),
    .boole_output(M_boolean_boole_output)
  );
  
  wire [8-1:0] M_shifter_shift_output;
  reg [6-1:0] M_shifter_alufn;
  reg [8-1:0] M_shifter_a;
  reg [8-1:0] M_shifter_b;
  shifter_31 shifter (
    .alufn(M_shifter_alufn),
    .a(M_shifter_a),
    .b(M_shifter_b),
    .shift_output(M_shifter_shift_output)
  );
  
  always @* begin
    M_adder_a = a;
    M_adder_b = b;
    M_adder_alufn = alufn;
    M_compare_z = M_adder_z;
    M_compare_sub_overflow = M_adder_sub_overflow;
    M_compare_n = M_adder_n;
    M_compare_alufn = alufn;
    M_boolean_a = a;
    M_boolean_b = b;
    M_boolean_alufn = alufn;
    M_shifter_a = a;
    M_shifter_b = b;
    M_shifter_alufn = alufn;
    sub_overflow = M_adder_sub_overflow;
    z = M_adder_z;
    v = M_adder_v;
    n = M_adder_n;
    
    case (alufn[4+1-:2])
      2'h0: begin
        alu_output = M_adder_sum_output;
      end
      2'h1: begin
        alu_output = M_boolean_boole_output;
      end
      2'h2: begin
        alu_output = M_shifter_shift_output;
      end
      2'h3: begin
        alu_output = M_compare_cmp_output;
      end
      default: begin
        alu_output = 8'h00;
      end
    endcase
  end
endmodule
