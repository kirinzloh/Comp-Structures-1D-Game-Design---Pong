/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module paddleA_6 (
    input clk,
    input rst,
    input [1:0] playing,
    input btnLeft,
    input btnRight,
    output reg [15:0] padA,
    output reg [3:0] padApos
  );
  
  
  
  wire [1-1:0] M_edge_detector_left_out;
  reg [1-1:0] M_edge_detector_left_in;
  edge_detector_12 edge_detector_left (
    .clk(clk),
    .in(M_edge_detector_left_in),
    .out(M_edge_detector_left_out)
  );
  wire [1-1:0] M_edge_detector_right_out;
  reg [1-1:0] M_edge_detector_right_in;
  edge_detector_12 edge_detector_right (
    .clk(clk),
    .in(M_edge_detector_right_in),
    .out(M_edge_detector_right_out)
  );
  wire [1-1:0] M_button_cond_left_out;
  reg [1-1:0] M_button_cond_left_in;
  button_conditioner_13 button_cond_left (
    .clk(clk),
    .in(M_button_cond_left_in),
    .out(M_button_cond_left_out)
  );
  wire [1-1:0] M_button_cond_right_out;
  reg [1-1:0] M_button_cond_right_in;
  button_conditioner_13 button_cond_right (
    .clk(clk),
    .in(M_button_cond_right_in),
    .out(M_button_cond_right_out)
  );
  localparam LEFTSCREEN_state = 2'd0;
  localparam RIGHTSCREEN_state = 2'd1;
  localparam CENTERSCREEN_state = 2'd2;
  localparam GAMESTART_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = GAMESTART_state;
  reg [7:0] M_padAlefttemp_d, M_padAlefttemp_q = 1'h0;
  reg [7:0] M_padArighttemp_d, M_padArighttemp_q = 1'h0;
  reg [3:0] M_padApostemp_d, M_padApostemp_q = 1'h0;
  
  reg [7:0] alu_output;
  
  wire [1-1:0] M_alu_sub_overflow;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  wire [8-1:0] M_alu_alu_output;
  reg [6-1:0] M_alu_alufn;
  reg [8-1:0] M_alu_a;
  reg [8-1:0] M_alu_b;
  alu_18 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .sub_overflow(M_alu_sub_overflow),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n),
    .alu_output(M_alu_alu_output)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_padAlefttemp_d = M_padAlefttemp_q;
    M_padArighttemp_d = M_padArighttemp_q;
    M_padApostemp_d = M_padApostemp_q;
    
    padApos = M_padApostemp_q;
    padA = {M_padAlefttemp_q, M_padArighttemp_q};
    M_button_cond_left_in = btnLeft;
    M_edge_detector_left_in = M_button_cond_left_out;
    M_button_cond_right_in = btnRight;
    M_edge_detector_right_in = M_button_cond_right_out;
    M_alu_alufn = 6'h20;
    M_alu_a = M_padArighttemp_q;
    M_alu_b = 8'h01;
    alu_output = M_alu_alu_output;
    
    case (M_state_q)
      GAMESTART_state: begin
        M_padApostemp_d = 1'h1;
        M_padAlefttemp_d = 8'h00;
        M_padArighttemp_d = 8'h07;
        M_state_d = LEFTSCREEN_state;
      end
      LEFTSCREEN_state: begin
        if (playing == 1'h1) begin
          if (M_edge_detector_left_out == 1'h1 && M_padArighttemp_q != 8'h07) begin
            M_alu_alufn = 6'h21;
            M_alu_a = M_padArighttemp_q;
            M_alu_b = 8'h01;
            alu_output = M_alu_alu_output;
            M_padArighttemp_d = alu_output;
            padA = {M_padAlefttemp_q, M_padArighttemp_q};
            M_padApostemp_d = M_padApostemp_q - 1'h1;
            padApos = M_padApostemp_q;
          end
          if (M_edge_detector_right_out == 1'h1 && M_padArighttemp_q != 8'he0) begin
            M_alu_alufn = 6'h20;
            M_alu_a = M_padArighttemp_q;
            M_alu_b = 8'h01;
            alu_output = M_alu_alu_output;
            M_padArighttemp_d = alu_output;
            padA = {M_padAlefttemp_q, M_padArighttemp_q};
            M_padApostemp_d = M_padApostemp_q + 1'h1;
            padApos = M_padApostemp_q;
          end else begin
            if (M_edge_detector_right_out == 1'h1 && M_padArighttemp_q == 8'he0) begin
              M_padAlefttemp_d = 8'h01;
              M_padArighttemp_d = 8'hc0;
              padA = {M_padAlefttemp_q, M_padArighttemp_q};
              M_padApostemp_d = M_padApostemp_q + 1'h1;
              padApos = M_padApostemp_q;
              M_state_d = CENTERSCREEN_state;
            end
          end
        end else begin
          if (playing == 1'h0) begin
            M_state_d = GAMESTART_state;
          end
        end
      end
      RIGHTSCREEN_state: begin
        if (playing == 1'h1) begin
          if (M_edge_detector_left_out == 1'h1 && M_padAlefttemp_q != 8'h07) begin
            M_alu_alufn = 6'h21;
            M_alu_a = M_padAlefttemp_q;
            M_alu_b = 8'h01;
            alu_output = M_alu_alu_output;
            M_padAlefttemp_d = alu_output;
            padA = {M_padAlefttemp_q, M_padArighttemp_q};
            M_padApostemp_d = M_padApostemp_q - 1'h1;
            padApos = M_padApostemp_q;
          end
          if (M_edge_detector_right_out == 1'h1 && M_padAlefttemp_q != 8'he0) begin
            M_alu_alufn = 6'h20;
            M_alu_a = M_padAlefttemp_q;
            M_alu_b = 8'h01;
            alu_output = M_alu_alu_output;
            M_padAlefttemp_d = alu_output;
            padA = {M_padAlefttemp_q, M_padArighttemp_q};
            M_padApostemp_d = M_padApostemp_q + 1'h1;
            padApos = M_padApostemp_q;
          end else begin
            if (M_edge_detector_left_out == 1'h1 && M_padAlefttemp_q == 8'h07) begin
              M_padAlefttemp_d = 8'h03;
              M_padArighttemp_d = 8'h80;
              padA = {M_padAlefttemp_q, M_padArighttemp_q};
              M_padApostemp_d = M_padApostemp_q - 1'h1;
              padApos = M_padApostemp_q;
              M_state_d = CENTERSCREEN_state;
            end
          end
        end else begin
          if (playing == 1'h0) begin
            M_state_d = GAMESTART_state;
          end
        end
      end
      CENTERSCREEN_state: begin
        if (playing == 1'h1) begin
          if (M_edge_detector_right_out == 1'h1 && M_padArighttemp_q == 8'hc0) begin
            M_padAlefttemp_d = 8'h03;
            M_padArighttemp_d = 8'h80;
            padA = {M_padAlefttemp_q, M_padArighttemp_q};
            M_padApostemp_d = M_padApostemp_q + 1'h1;
            padApos = M_padApostemp_q;
          end else begin
            if (M_edge_detector_right_out == 1'h1 && M_padArighttemp_q == 8'h80) begin
              M_padAlefttemp_d = 8'h07;
              M_padArighttemp_d = 8'h00;
              padA = {M_padAlefttemp_q, M_padArighttemp_q};
              M_padApostemp_d = M_padApostemp_q + 1'h1;
              padApos = M_padApostemp_q;
              M_state_d = RIGHTSCREEN_state;
            end else begin
              if (M_edge_detector_left_out == 1'h1 && M_padAlefttemp_q == 8'h03) begin
                M_padAlefttemp_d = 8'h01;
                M_padArighttemp_d = 8'hc0;
                padA = {M_padAlefttemp_q, M_padArighttemp_q};
                M_padApostemp_d = M_padApostemp_q - 1'h1;
                padApos = M_padApostemp_q;
              end else begin
                if (M_edge_detector_left_out == 1'h1 && M_padAlefttemp_q == 8'h01) begin
                  M_padAlefttemp_d = 8'h00;
                  M_padArighttemp_d = 8'he0;
                  padA = {M_padAlefttemp_q, M_padArighttemp_q};
                  M_padApostemp_d = M_padApostemp_q - 1'h1;
                  padApos = M_padApostemp_q;
                  M_state_d = LEFTSCREEN_state;
                end
              end
            end
          end
        end else begin
          if (playing == 1'h0) begin
            M_state_d = GAMESTART_state;
          end
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_padAlefttemp_q <= 1'h0;
      M_padArighttemp_q <= 1'h0;
      M_padApostemp_q <= 1'h0;
    end else begin
      M_padAlefttemp_q <= M_padAlefttemp_d;
      M_padArighttemp_q <= M_padArighttemp_d;
      M_padApostemp_q <= M_padApostemp_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 2'h3;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
