/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input btnLeft,
    input btnStart,
    input btnRight,
    output reg [7:0] ledmatrix
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  reg [255:0] pattern;
  
  reg [3:0] ballX;
  
  reg [3:0] ballY;
  
  reg [3:0] padA;
  
  reg [3:0] padB;
  
  reg playing;
  
  reg [3:0] scoreA;
  
  reg [3:0] scoreB;
  
  wire [8-1:0] M_disp_ledmatrix;
  reg [1-1:0] M_disp_clk;
  reg [1-1:0] M_disp_rst;
  reg [256-1:0] M_disp_pattern;
  display_2 disp (
    .clk(M_disp_clk),
    .rst(M_disp_rst),
    .pattern(M_disp_pattern),
    .ledmatrix(M_disp_ledmatrix)
  );
  
  wire [256-1:0] M_drawpong_pattern;
  reg [1-1:0] M_drawpong_clk;
  reg [1-1:0] M_drawpong_rst;
  reg [4-1:0] M_drawpong_ballX;
  reg [4-1:0] M_drawpong_ballY;
  reg [4-1:0] M_drawpong_padA;
  reg [4-1:0] M_drawpong_padB;
  reg [1-1:0] M_drawpong_playing;
  drawing_3 drawpong (
    .clk(M_drawpong_clk),
    .rst(M_drawpong_rst),
    .ballX(M_drawpong_ballX),
    .ballY(M_drawpong_ballY),
    .padA(M_drawpong_padA),
    .padB(M_drawpong_padB),
    .playing(M_drawpong_playing),
    .pattern(M_drawpong_pattern)
  );
  
  wire [1-1:0] M_logic_playing;
  reg [1-1:0] M_logic_btnStart;
  reg [4-1:0] M_logic_scoreA;
  reg [4-1:0] M_logic_scoreB;
  logic_4 logic (
    .btnStart(M_logic_btnStart),
    .scoreA(M_logic_scoreA),
    .scoreB(M_logic_scoreB),
    .playing(M_logic_playing)
  );
  
  wire [4-1:0] M_ball_ballX;
  wire [4-1:0] M_ball_ballY;
  reg [1-1:0] M_ball_clk;
  reg [1-1:0] M_ball_rst;
  reg [1-1:0] M_ball_playing;
  reg [4-1:0] M_ball_padA;
  reg [4-1:0] M_ball_padB;
  ball_5 ball (
    .clk(M_ball_clk),
    .rst(M_ball_rst),
    .playing(M_ball_playing),
    .padA(M_ball_padA),
    .padB(M_ball_padB),
    .ballX(M_ball_ballX),
    .ballY(M_ball_ballY)
  );
  
  wire [4-1:0] M_paddleA_padA;
  reg [1-1:0] M_paddleA_clk;
  reg [1-1:0] M_paddleA_rst;
  reg [1-1:0] M_paddleA_playing;
  reg [1-1:0] M_paddleA_btnLeft;
  reg [1-1:0] M_paddleA_btnRight;
  paddleA_6 paddleA (
    .clk(M_paddleA_clk),
    .rst(M_paddleA_rst),
    .playing(M_paddleA_playing),
    .btnLeft(M_paddleA_btnLeft),
    .btnRight(M_paddleA_btnRight),
    .padA(M_paddleA_padA)
  );
  
  wire [4-1:0] M_paddleB_padB;
  reg [1-1:0] M_paddleB_clk;
  reg [1-1:0] M_paddleB_rst;
  reg [1-1:0] M_paddleB_playing;
  reg [1-1:0] M_paddleB_btnLeft;
  reg [1-1:0] M_paddleB_btnRight;
  paddleB_7 paddleB (
    .clk(M_paddleB_clk),
    .rst(M_paddleB_rst),
    .playing(M_paddleB_playing),
    .btnLeft(M_paddleB_btnLeft),
    .btnRight(M_paddleB_btnRight),
    .padB(M_paddleB_padB)
  );
  
  wire [4-1:0] M_score_scoreA;
  wire [4-1:0] M_score_scoreB;
  reg [1-1:0] M_score_playing;
  reg [4-1:0] M_score_ballY;
  score_8 score (
    .playing(M_score_playing),
    .ballY(M_score_ballY),
    .scoreA(M_score_scoreA),
    .scoreB(M_score_scoreB)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    playing = 1'h0;
    scoreA = 1'h0;
    scoreB = 1'h0;
    M_logic_btnStart = btnStart;
    M_logic_scoreA = scoreA;
    M_logic_scoreB = scoreB;
    playing = M_logic_playing;
    M_paddleA_clk = clk;
    M_paddleA_rst = rst;
    M_paddleA_playing = playing;
    M_paddleA_btnLeft = btnLeft;
    M_paddleA_btnRight = btnRight;
    padA = M_paddleA_padA;
    M_paddleB_clk = clk;
    M_paddleB_rst = rst;
    M_paddleB_playing = playing;
    M_paddleB_btnLeft = btnLeft;
    M_paddleB_btnRight = btnRight;
    padB = M_paddleB_padB;
    M_ball_clk = clk;
    M_ball_rst = rst;
    M_ball_playing = playing;
    M_ball_padA = padA;
    M_ball_padB = padB;
    ballX = M_ball_ballX;
    ballY = M_ball_ballY;
    M_score_playing = playing;
    M_score_ballY = ballY;
    scoreA = M_score_scoreA;
    scoreB = M_score_scoreB;
    M_drawpong_clk = clk;
    M_drawpong_rst = rst;
    M_drawpong_ballX = ballX;
    M_drawpong_ballY = ballY;
    M_drawpong_padA = padA;
    M_drawpong_padB = padB;
    M_drawpong_playing = playing;
    pattern = M_drawpong_pattern;
    M_disp_clk = clk;
    M_disp_rst = rst;
    M_disp_pattern = pattern;
    ledmatrix = M_disp_ledmatrix;
  end
endmodule
